Block items
===========

Items in the blocks are stored in the ezm_pool table.
Let's first have a look at the table and its attributes:

    block_id
        - id of the block (32 character string)
    object_id
        - object ID of the item
    node_id
        - node ID of the item
    priority
        - priority (integer) is used to be able to determine 
          the order of the items in the queue (waiting items) or of the
          visible items.
    ts_publication
        - timestamp when the item is or was to be published
    ts_visible
        - timestamp when the item was made visible (0 if it was yet not
          published, see table below)
    ts_hidden
        - timestamp, when the item was moved to archive (0 if it was
          not yet moved to archive, see table below)
    rotation_until
        - if the block is using the rotation, this is the timestamp
          until when the item rotates. After this time the item will be
          moved to the archive instead of back to the queue
    moved_to
        - if the item was moved to another block (overflow), this is
          an ID of the block.

The primary key is (block_id, object_id). The reason object_id
was chosen and not node_id is that we don't want to show the same
articles in the same block if they are published on multiple places.

An item can be in one of the following states:

    - waiting item (item in the queue)
    - valid item
    - archived item

For more information about the state, see the specification of the project.

The relation between the state and the value of the timestamp in the ezm_pool
table is shown in the following table:

                   |  waiting                   valid                     archived
    ---------------+-------------------------------------------------------------------
    ts_publication | 
    ts_visible     |    = 0                       > 0
    ts_hidden      |    = 0                       = 0                     > 0
    order of items |  ts_publication asc,       priority asc              not important
                   |  priority asc



How the ezmupdate.php script works
----------------------------------
The following are the steps the script (in the following text referenced
as "it") takes:

    - It checks if there are some blocks to be removed (In ezm_block, is_removed is set to 1)
      It removes the items from the pool (ezm_pool table) and then removes the block itself
      from the ezm_block table.

    - For all nodes which contain at least one block:

        - Determine the order in which the blocks must be processed in respect to the
          overflow blocks. If there is a loop detected, the warning will be printed, but
          the script will continue.

        - For all blocks processed in the determined order:

            - If the block is not to be updated because of the time passed from the last update
              is less than set TTL or the rotation interval (if rotation is used), continue to
              the next block

            - Update the pool of the block by calling fetch function set in the INI settings for
              the block type. Fetches are implemented as classes extending ezmFetchInterface
              and overriding fetch( $parameters, $publishedAfter, $publishedBeforeOrAt ) function.
              These classes have to be stored in extension/ezmedia/classes/fetches and the name
              of PHP file must be the <classname>.php (case sensitive). The fetch() function
              returns array of items, each item defined as array with the following keys:
              
                - object_id
                - node_id
                - ts_publication

              Only new items must be fetched, those which appeared in the source between
              $publishedAfter (exclusive) and $publishedBeforeOrAt (inclusive).

              For sample fetch, check extension/ezmedia/classes/fetches/ezmLatestObjects.php.

            - After updating the pool, the waiting items whose ts_publication is in the past
              are moved from the queue to the valid items. The order of processing is given
              by ts_publication (the lower, the earlier the item is processed), in the case
              of the same value of ts_publication, lower priority means earlier processing.
              This might seem not very used, however, for the random rotation (shuffle)
              the ts_publication is set to 0 and priority to random value. In this case,
              the priority determines the order of processing.
              
              Upon moving the items to the valid ones, the ts_visible timestamp is set to
              the current time and the priority is set to the maximum priority value of the currently
              valid items plus one. This is done to be able to quickly determine the
              correct order of the valid items.

            - Now, there are too many valid items, so the oldest (in terms of lowest value
              of the priority) must be moved away in order to achieve that number of the 
              valid items is not higher than the limit set in the INI file for the block type.
              What happens with the item might differ:
              
                - items are moved back to the queue.
                  This happens if there is rotation on the block and an item's rotation_until
                  is still in the future. These items are moved back:
                    
                    - in case of normal rotation: 
                      with ts_visible being the negated value of the current timestamp (-$time).
                      This ensures that next time the update script is run, the items moved back
                      to the queue first will be processed first. 

                    - in case of random rotation:
                      with ts_visible 0 and random priority.

                - items are moved to another block
                  This happens if there is an overflow block set for the current block.
                
                - items are archived
                  In all other cases.

              When items are moved to the archive, the ts_hidden is set to the current time.

            - The cleanup of the archived items is done. The oldest items are removed so that
              there is only given number of the items set in INI settings.

        - If any block of the given node was changed, the cache for the node is removed.
          In the future: the persistent cache for the given node is regenerated.

This script is usually run from the cronjob:

    runcronjobs.php -s <siteaccess> ezmedia
